version: "3.8"
# Les services sont les conteneurs qui seront créés et exécutés par Docker Compose.
services:
  
  skin-sight-backend:
    build:
      # on précise le dossier où se trouve le dockerfile par rapport au fichier docker-compose.yml, ici le dockerfile se trouve dans le même dossier que le docker-compose.yml d'où le .
      context: .
      # On indique l'étape de build à utiliser dans le Dockerfile grâce à l'alias contenu dans celui-ci (FROM base AS development)
      target: development
    volumes:
      # Liaison entre le dossier courant et le dossier /app du conteneur de manière à ce que les changements dans le conteneur se fassent en temps réel
      # Il est possible d'utiliser une autre syntaxe qui fait la même chose sous la forme - ./chemin/vers/dossier:/app mais le choix de l'autre syntaxe est parce qu'elle est plus verbeuse
      - type: bind
        source: ./
        target: /app
      # on précise le dossier app/node_modules pour éviter de l'overrider
      # ce volume est anonyme, on le reconnaît car on ne donne que le chemin du dossier dans le conteneur
      - /app/node_modules
    # on précise le fichier .env à utiliser afin d'avoir accès aux variables d'environnement sans le mettre dans le conteneur
    env_file: .env
    # commande pour lancer le serveur en mode dev, cette commande sera prioritaire à la commande se trouvant dans le dockerfile
    command: npm start
    ports:
      - "5000:5000"

  sonarqube:
    image: sonarqube:community
    depends_on:
      - db
    
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
  
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data: